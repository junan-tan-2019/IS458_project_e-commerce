stages:
  - Static Analysis
  - Release
  - Deploy

flake8:
  stage: Static Analysis
  image: python:3-slim
  before_script:
    - python -V
    - python -m pip install flake8
  script:
    - flake8 --extend-ignore=E501,E127,E128,E225,E275 src | tee flake8_report.txt
  artifacts:
    when: on_failure
    paths:
      - flake8_report.txt

pylint:
  stage: Static Analysis
  image: python:3-slim
  before_script:
    - python -V
    - python -m pip install -r requirements.txt
    - python -m pip install pylint
  script:
    - pylint -d C0103,E1101,W0511,C0116 --fail-under=7 src | tee pylint_report.txt
  artifacts:
    when: always
    paths:
      - pylint_report.txt

release-image:
  stage: Release
  image: docker:20.10.7
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHA"

deploy-ecs:
  stage: Deploy
  image: 'registry.gitlab.com/gitlab-org/cloud-deploy/aws-ecs:latest'
  environment:
    name: production
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
  script:
    - ecs update-task-definition
